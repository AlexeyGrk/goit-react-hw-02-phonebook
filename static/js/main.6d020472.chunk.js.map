{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/FilterForm/FilterForm.styled.jsx","components/FilterForm/FilterForm.jsx","components/Phonebook/Phonebook.styled.jsx","components/Phonebook/Phonebook.jsx","App.js","index.js"],"names":["ContactFromContainer","ContactMainForm","ContactFormNameLabel","ContactFromNameInput","ContactFormNumberLabel","ContactFromNumberInput","ContactFromMainButton","ContactFromTitle","ContactForm","pushHandleName","henleDobleNameAndNumber","idFormInputName","uuidv4","idFormInputNumber","onSubmit","htmlFor","type","name","pattern","title","required","onChange","id","ContactCtalog","ContactListItem","ContactListDeleteButton","ContactList","contactsState","filterState","deleteContact","console","log","filter","contacts","number","toLowerCase","includes","map","index","onClick","FilterInput","FilterForm","handleNameFilter","SectionContainer","PhonebookMainTitle","PhonebookSecondaryTitle","ContactsAndFilterContainer","ContainerPhonebookWithoutMainTitle","Phonebook","state","e","setState","currentTarget","value","target","contactId","prevState","contact","preventDefault","some","alert","this","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d020472.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\nexport const ContactFromContainer = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  border: 1px dashed tomato;\n`;\nexport const ContactMainForm = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 5px;\n  margin: 10px;\n`;\nexport const ContactFormNameLabel = styled.label``;\nexport const ContactFromNameInput = styled.input`\n  caret-color: tomato;\n  margin: 10px;\n`;\nexport const ContactFormNumberLabel = styled.label``;\nexport const ContactFromNumberInput = styled.input`\n  caret-color: tomato;\n  margin: 10px;\n`;\nexport const ContactFromMainButton = styled.button``;\nexport const ContactFromTitle = styled.h2`\n  color: tomato;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  ContactFromContainer,\n  ContactMainForm,\n  ContactFormNameLabel,\n  ContactFromNameInput,\n  ContactFormNumberLabel,\n  ContactFromNumberInput,\n  ContactFromMainButton,\n  ContactFromTitle,\n} from \"./ContactForm.styled\";\n\nconst ContactForm = ({ pushHandleName, henleDobleNameAndNumber }) => {\n  const idFormInputName = uuidv4();\n  const idFormInputNumber = uuidv4();\n  return (\n    <ContactFromContainer>\n      <ContactFromTitle>Add contact</ContactFromTitle>\n      <ContactMainForm onSubmit={pushHandleName}>\n        <ContactFormNameLabel htmlFor={idFormInputName}>\n          Name\n        </ContactFormNameLabel>\n        <ContactFromNameInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={henleDobleNameAndNumber}\n          id={idFormInputName}\n        />\n\n        <ContactFormNumberLabel htmlFor={idFormInputNumber}>\n          Number\n        </ContactFormNumberLabel>\n        <ContactFromNumberInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          id={idFormInputNumber}\n          onChange={henleDobleNameAndNumber}\n        />\n        <ContactFromMainButton type=\"submit\">Add contact</ContactFromMainButton>\n      </ContactMainForm>\n    </ContactFromContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const ContactCtalog = styled.ul`\n  padding: 5px;\n`;\nexport const ContactListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border: 1px solid black;\n  margin: 5px;\n`;\nexport const ContactListDeleteButton = styled.button`\n  margin: 0 5px;\n`;\n","import React from \"react\";\nimport {\n  ContactCtalog,\n  ContactListItem,\n  ContactListDeleteButton,\n} from \"./ContactList.styled\";\n\nconst ContactList = ({ contactsState, filterState, deleteContact }) => {\n  console.log(contactsState);\n  return (\n    <ContactCtalog>\n      {contactsState\n        .filter(\n          (contacts) =>\n            filterState === \"\" ||\n            contacts.number.toLowerCase().includes(filterState.toLowerCase()) ||\n            contacts.name.toLowerCase().includes(filterState.toLowerCase())\n        )\n        .map(({ id, name, number }, index) => {\n          return (\n            <ContactListItem key={id}>\n              {name} : {number}\n              <ContactListDeleteButton onClick={() => deleteContact(id)}>\n                x\n              </ContactListDeleteButton>\n            </ContactListItem>\n          );\n        })}\n    </ContactCtalog>\n  );\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled/macro\";\nexport const FilterInput = styled.input`\n  caret-color: tomato;\n`;\n","import React from \"react\";\nimport { FilterInput } from \"./FilterForm.styled\";\n\nconst FilterForm = ({ handleNameFilter }) => {\n  return <FilterInput onChange={handleNameFilter} type=\"text\" />;\n};\n\nexport default FilterForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const SectionContainer = styled.section``;\n\nexport const PhonebookMainTitle = styled.h1`\n  display: flex;\n  justify-content: center;\n\n  color: tomato;\n`;\nexport const PhonebookSecondaryTitle = styled.h2`\n  color: tomato;\n`;\nexport const ContactsAndFilterContainer = styled.div`\n  display: inline-flex;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const ContainerPhonebookWithoutMainTitle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport FilterForm from \"../FilterForm/FilterForm\";\nimport {\n  PhonebookMainTitle,\n  PhonebookSecondaryTitle,\n  SectionContainer,\n  ContactsAndFilterContainer,\n  ContainerPhonebookWithoutMainTitle,\n} from \"./Phonebook.styled\";\n\nexport class Phonebook extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n  henleDobleNameAndNumber = (e) => {\n    this.setState({\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n  };\n\n  handleNameFilter = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n  pushHandleName = (e) => {\n    const id = uuidv4();\n    e.preventDefault();\n\n    this.setState((prevState) => ({\n      contacts: [\n        prevState.contacts.some((contact) => contact.name === this.state.name)\n          ? alert(\"Такой контакт уже есть, проверьте данные\") ?? {\n              id: id,\n              name: this.state.name,\n              number: this.state.number,\n            }\n          : { id: id, name: this.state.name, number: this.state.number },\n        ...prevState.contacts,\n\n        // ...prevState.contacts,\n        // { id: id, name: this.state.name, number: this.state.number },\n      ],\n    }));\n  };\n\n  render() {\n    return (\n      <SectionContainer>\n        <PhonebookMainTitle>Phonebook</PhonebookMainTitle>\n        <ContainerPhonebookWithoutMainTitle>\n          <ContactForm\n            pushHandleName={this.pushHandleName}\n            henleDobleNameAndNumber={this.henleDobleNameAndNumber}\n          />\n          <ContactsAndFilterContainer>\n            <PhonebookSecondaryTitle>Contacts</PhonebookSecondaryTitle>\n            <FilterForm handleNameFilter={this.handleNameFilter} />\n            <ContactList\n              contactsState={this.state.contacts}\n              filterState={this.state.filter}\n              deleteContact={this.deleteContact}\n            />\n          </ContactsAndFilterContainer>\n        </ContainerPhonebookWithoutMainTitle>\n      </SectionContainer>\n    );\n  }\n}\n\nexport default Phonebook;\n","import \"./App.css\";\nimport Phonebook from \"./components/Phonebook/Phonebook\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}